"""
----- copyright notice -----
Copyright (c) 2022 mssrchapelier (Kirill Karpenko)

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.

----- description -----

Using citation-list.tsv, which was generated
by running build_citation_list.py (NB: manually edit
the .tsv file to correct any parsing errors),

1) Converts the format of citations in the text of the article.
    Example: "[15]" -> "[Smith et al. 2020]"
2) Creates a file with the new reference list; the format of references
is specified in RefObj.get_output().
    Example: "Buckwalter 2002 â€” Tim Buckwalter. Buckwalter Arabic ..., 2002."
"""

import os, re, argparse
from refobj import RefObj

def read_citation_list(citation_list_path):
    """
    Reads the edited references and citations from the .tsv file
    at citation_list_path and returns them as a dict:
    {RefObj.number : RefObj} (RefObj.number is the number under which
    the reference is cited in the text).
    Example: {"36" : refobj}, where refobj.number == "36".
    """
    refobjs = dict()
    with open(citation_list_path, "r", encoding="utf8") as fin:
        for line in fin.readlines():
            number, intext, reference = line.split("\t")
            refobj = RefObj()
            refobj.number = number
            refobj.intext = intext
            refobj.reference = reference
            refobjs[number] = refobj
    return refobjs

def write_references_to_file(refobjs, refs_out_path):
    """
    Writes RefObj instances from refobjs to references_out_path
    (sorted alphabetically by the [first] surname in citation).
    """
    # sort refobjs alphabetically by .intext
    refobj_list = [refobj for _, refobj in refobjs.items()]
    refobj_list.sort(key=lambda refobj: refobj.intext)
    os.makedirs(os.path.dirname(refs_out_path), exist_ok=True)
    with open(refs_out_path, "w", encoding="utf8") as fout:
        for refobj in refobj_list:
            fout.write(refobj.get_output())

def convert_citations_in_text(refobjs, *, input_path, output_path):

    def _get_converted_citation(matchobj):
        matched_num = matchobj.group("num")
        substitution = (refobjs[matched_num].intext
                        if matched_num in refobjs
                        else matchobj.group(0))
        return "[{}]".format(substitution)
    
    out_lines = []
    with open(input_path, "r", encoding="utf8") as fin:
        for line in fin:
            out_lines.append(re.sub(r"\[(?P<num>\d+)\]",
                                    _get_converted_citation,
                                    line))
    os.makedirs(os.path.dirname(output_path), exist_ok=True)
    with open(output_path, "w", encoding="utf8") as fout:
        for line in out_lines:
            fout.write(line)

def main(args):
    print("Reading citation list from: {}".format(args.citation_tsv))
    refobjs = read_citation_list(args.citation_tsv)
    print(("Converting citations in the text "
           "from: {}").format(args.input_text))
    convert_citations_in_text(refobjs,
                              input_path=args.input_text,
                              output_path=args.output_text)
    print("Writing the new reference file to: {}"
              .format(args.output_references))
    write_references_to_file(refobjs, args.output_references)
    print("Completed!\n"
          + "Converted text written to: {}\n".format(args.output_text)
          + "Converted references written to: {}".format(args.output_text))

if __name__ == "__main__":
    # --- parse command line arguments ---
    parser = argparse.ArgumentParser()
    parser.add_argument("input_text",
                        help="the path to the original text of the article")
    parser.add_argument("--citation_tsv",
                        help=("the path to the .tsv file "
                              "with citations and references (generated by "
                              "build_citation_list.py)"),
                        default="citation-list.tsv")
    parser.add_argument("--output_text",
                        help=("the path to which the new text of the article "
                              "(with the citations converted) will be written"),
                        default="./output/text-new.txt")
    parser.add_argument("--output_references",
                        help=("the path to which the new file with "
                              "references will be written"),
                        default="./output/references-new.txt")
    args = parser.parse_args()
    
    main(args)
